public class DataLord {

	/*
Write a class called DataLord that has 1 method called NumAccounts. This method 
should return the number of Accounts that exist in org
*/
    public static Integer numAccounts() {
        AggregateResult result = [ SELECT count(Id) FROM Account ];
        return (Integer)result.get('expr0');
    }
    
    /*
Write a method called NumHot. This method should return the number of Accounts with a Rating of Hot
*/
    public static Integer numHot() {
        AggregateResult result = [ SELECT count(Id) FROM Account WHERE Rating = 'Hot' ];
        return (Integer)result.get('expr0');
    }
    
    /*
Write a method called NumComplex. This method should return the number of Accounts that have an ampersand 
(&) in the Name
*/
    public static Integer numComplex() {
        AggregateResult result = [ SELECT count(Id) FROM Account WHERE Name LIKE '%&%' ];
        return (Integer)result.get('expr0');
    }
    
    /*
Write a method called BigFive. This method should return the top 5 Accounts in terms of Annual Revenue. 
You may only use 1 line of code for the method body
*/
    public static List<Account> bigFive() {
        return [ SELECT Id, Name, AnnualRevenue FROM Account WHERE AnnualRevenue <> null ORDER BY AnnualRevenue DESC LIMIT 5 ];
    }
    
    /*
Write a method called LastBigOpportunity. This method should return the Opportunity with the most 
recent Close Date that had an Amount over $100,000.
*/
    public static Opportunity lastBigOpportunity() {
        return [ SELECT Id, Name, CloseDate, Amount FROM Opportunity
               WHERE Amount > 100000
               ORDER BY CloseDate DESC
               LIMIT 1];
    }
    
    /*
Write a method called MajorPlayers. This method should return all Contacts that are associated to 
an Account with a Rating of Hot.
*/
    public static List<Contact> majorPlayers() {
        return [ SELECT Id, Name, Account.Rating FROM Contact
               WHERE Account.Rating = 'Hot'];
    }
    
    /*
Write a method called MostPopularAccount. This method should return the Account Name 
that has the most associated Contacts
*/
    public static String mostPopularAccount() {
        AggregateResult mostPopAcc = [ SELECT Count(Id) numContacts, Account.Name FROM Contact
                                   GROUP BY AccountId, Account.Name
                                      ORDER BY Count(Id) DESC
                                      LIMIT 1
                                   ];
        String accountName = (String)mostPopAcc.get('Name');
        return accountName;
    }
    
}




